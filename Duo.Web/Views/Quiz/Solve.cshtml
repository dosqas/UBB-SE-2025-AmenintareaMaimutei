@model Duo.Web.ViewModels.QuizSolverViewModel
@using DuoClassLibrary.Models.Exercises

@{
    Layout = "_Layout";
    ViewData["Title"] = $"Solving: {Model.QuizTitle}";
    var pct = (int)Math.Ceiling(100.0 * (Model.CurrentExerciseIndex + 1) / Model.AllExercises.Count);

}

<div class="quiz-solver-container" style="max-width:800px; margin:auto; padding:20px;">
    <h1 class="text-center">@ViewData["Title"]</h1>
    <p class="text-center">Question @(Model.CurrentExerciseIndex + 1) of @Model.AllExercises.Count</p>
    <hr />

    <div class="progress mb-4" style="height:6px;">
        <div class="progress-bar bg-success" role="progressbar"
             style="width:@pct%;" aria-valuenow="@pct" aria-valuemin="0" aria-valuemax="100">
        </div>
    </div>

    @switch (Model.CurrentExerciseType)
    {
        case nameof(AssociationExercise):
            var assoc = (AssociationExercise)Model.CurrentExercise;
            <div style="position:relative; padding:1rem; border:1px solid #ccc; border-radius:.5rem; background:#fff;">
                <h5 class="text-center">@assoc.Question</h5>
                <div class="row">
                    <div class="col-6">
                        <ul id="assoc-left" class="list-group">
                            @for (int i = 0; i < assoc.FirstAnswersList.Count; i++)
                            {
                                <li class="list-group-item assoc-left-item" data-index="@i">
                                    @assoc.FirstAnswersList[i]
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="col-6">
                        <ul id="assoc-right" class="list-group">
                            @for (int j = 0; j < assoc.SecondAnswersList.Count; j++)
                            {
                                <li class="list-group-item assoc-right-item" data-index="@j">
                                    @assoc.SecondAnswersList[j]
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                <canvas id="assoc-canvas"
                        style="position:absolute; top:0; left:0; width:100%; height:100%; pointer-events:none;">
                </canvas>
                <input type="hidden" id="AssociationPairsJson" name="AssociationPairsJson" />
            </div>
            break;

        case nameof(MultipleChoiceExercise):
            var mc = (MultipleChoiceExercise)Model.CurrentExercise;
            <div class="card mb-3 p-3">
                <h5>@mc.Question</h5>
                <form id="mc-form">
                    @for (int i = 0; i < mc.Choices.Count; i++)
                    {
                        var c = mc.Choices[i];
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="radio"
                                   name="mcChoice"
                                   id="opt@i"
                                   value="@c.Answer" />
                            <label class="form-check-label" for="opt@i">
                                @c.Answer
                            </label>
                        </div>
                    }
                    <input type="hidden" id="MCAnswer" name="MCAnswer" />
                </form>
            </div>
            break;

        case nameof(FillInTheBlankExercise):
            var fib = (FillInTheBlankExercise)Model.CurrentExercise;
            var parts = System.Text.RegularExpressions.Regex.Split(fib.Question, @"\{\}");
            <div class="card mb-3 p-3">
                <h5>@fib.Question</h5>
                @if (parts.Length > 1)
                {
                    <p>
                        @for (int i = 0; i < parts.Length; i++)
                        {
                            @parts[i]
                            @if (i < parts.Length - 1)
                            {
                                <input type="text"
                                       class="form-control d-inline-block blank-input"
                                       style="width:150px; margin:0 .25rem;"
                                       placeholder="Answer"
                                       data-index="@i" />
                            }
                        }
                    </p>
                }
                else
                {
                    <p class="text-muted">Enter your answers:</p>
                    @for (int i = 0; i < fib.PossibleCorrectAnswers.Count; i++)
                    {
                        <input type="text"
                               class="form-control mb-2 blank-input"
                               placeholder="Answer"
                               data-index="@i" />
                    }
                }
                <input type="hidden" id="BlankAnswersJson" name="BlankAnswersJson" />
            </div>
            break;

        case nameof(FlashcardExercise):
            <div class="mb-3">
                @await Html.PartialAsync(
                         "~/Views/Exercise/_FlashcardExerciseForm.cshtml",
                         (FlashcardExercise)Model.CurrentExercise
                         )
            </div>
            break;

        default:
            <p class="text-danger">Unsupported exercise type: @Model.CurrentExerciseType</p>
            break;
    }

    <div class="text-center mt-4">
        @if (!Model.IsLastExercise)
        {
            <a asp-action="Solve"
               asp-route-id="@Model.QuizId"
               asp-route-index="@(Model.CurrentExerciseIndex + 1)"
               class="btn btn-dark btn-lg">
                Next Exercise →
            </a>
        }
        else
        {
            <a asp-controller="Roadmap"
               asp-action="Index"
               class="btn btn-success btn-lg">
                Finish Quiz
            </a>
        }
    </div>
</div>

@section Scripts {
    <script>
        (() => {
          const L = document.querySelectorAll('.assoc-left-item'),
                R = document.querySelectorAll('.assoc-right-item'),
                C = document.getElementById('assoc-canvas');
          if (C) {
            const ctx = C.getContext('2d');
            let sel = null, pairs = [];
            function resize(){ C.width = C.clientWidth; C.height = C.clientHeight; draw(); }
            function center(el){
              const r = el.getBoundingClientRect(), b = C.getBoundingClientRect();
              return { x:(r.left+r.right)/2-b.left, y:(r.top+r.bottom)/2-b.top };
            }
            function draw(){
              ctx.clearRect(0,0,C.width,C.height);
              ctx.strokeStyle='#198754'; ctx.lineWidth=2;
              pairs.forEach(p => {
                const a = center(L[p.left]), b = center(R[p.right]);
                ctx.beginPath(); ctx.moveTo(a.x,a.y); ctx.lineTo(b.x,b.y); ctx.stroke();
              });
              document.getElementById('AssociationPairsJson').value = JSON.stringify(pairs);
            }
            window.addEventListener('resize', resize);
            resize();
            L.forEach(li => li.onclick = () => {
              L.forEach(x=>x.classList.remove('active'));
              sel = +li.dataset.index; li.classList.add('active');
            });
            R.forEach(li => li.onclick = () => {
              if (sel === null) return;
              pairs = pairs.filter(p => p.left!==sel && p.right!==+li.dataset.index);
              pairs.push({ left:sel, right:+li.dataset.index });
              L[sel].classList.remove('active');
              sel = null; draw();
            });
          }

          const mc = document.getElementById('mc-form');
          if (mc) mc.onchange = () => {
            document.getElementById('MCAnswer').value = mc.mcChoice.value;
          };

          document.querySelectorAll('.blank-input').forEach(i => {
            i.oninput = () => {
              const arr = Array.from(document.querySelectorAll('.blank-input'))
                               .map(x=>x.value.trim());
              document.getElementById('BlankAnswersJson').value = JSON.stringify(arr);
            };
          });

 
          });
        })();
    </script>
}

<style>
    .assoc-left-item, .assoc-right-item {
        cursor: pointer;
    }

        .assoc-left-item.active, .assoc-right-item.active {
            background: #d1e7dd;
            border-color: #198754;
        }

    .blank-input {
        display: inline-block;
        width: 150px;
        margin: 0 .25rem;
    }

</style>
