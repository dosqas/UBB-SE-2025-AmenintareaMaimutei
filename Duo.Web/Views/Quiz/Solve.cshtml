@model Duo.Web.ViewModels.QuizSolverViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = $"Solving: {Model.QuizTitle}";
    var pct = (int)Math.Ceiling(100.0 * (Model.CurrentExerciseIndex + 1) / Model.AllExercises.Count);
}

<h1>@ViewData["Title"]</h1>
<p>Question @(Model.CurrentExerciseIndex + 1) of @Model.AllExercises.Count</p>

<div class="progress mb-4" style="height:6px;">
    <div class="progress-bar bg-success" style="width:@pct%;"></div>
</div>

<form method="post"
      asp-action="Solve"
      asp-route-id="@Model.QuizId"
      asp-route-index="@Model.CurrentExerciseIndex"
      onsubmit="return validateExercise();">
    @Html.AntiForgeryToken()

    @switch (Model.CurrentExerciseType)
    {
        case nameof(DuoClassLibrary.Models.Exercises.FlashcardExercise):
            @await Html.PartialAsync(
                    "~/Views/Exercise/_FlashcardExerciseForm.cshtml",
                    (DuoClassLibrary.Models.Exercises.FlashcardExercise)Model.CurrentExercise
                    )
            break;

        case nameof(DuoClassLibrary.Models.Exercises.AssociationExercise):
            @await Html.PartialAsync(
                    "~/Views/Exercise/_AssociationExerciseForm.cshtml",
                    (DuoClassLibrary.Models.Exercises.AssociationExercise)Model.CurrentExercise
                    )
            break;

        case nameof(DuoClassLibrary.Models.Exercises.MultipleChoiceExercise):
            @await Html.PartialAsync(
                    "~/Views/Exercise/_MultipleChoiceExerciseForm.cshtml",
                    (DuoClassLibrary.Models.Exercises.MultipleChoiceExercise)Model.CurrentExercise
                    )
            break;

        case nameof(DuoClassLibrary.Models.Exercises.FillInTheBlankExercise):
            @await Html.PartialAsync(
                    "~/Views/Exercise/_FillInTheBlankExerciseForm.cshtml",
                    (DuoClassLibrary.Models.Exercises.FillInTheBlankExercise)Model.CurrentExercise
                    )
            break;
    }

    <button type="submit"
            class="btn btn-dark btn-lg mt-3">
        @(Model.IsLastExercise ? "Finish Quiz" : "Next →")
    </button>
</form>

<script>
    function validateExercise() {
        // Check if this is a multiple choice exercise
        if (typeof window.validateMultipleChoice === 'function') {
            const isValid = window.validateMultipleChoice();
            if (!isValid) {
                return false;
            }
            // Add a small delay to show the feedback
            return new Promise(resolve => setTimeout(() => resolve(true), 1000));
        }
        return true;
    }
</script>
