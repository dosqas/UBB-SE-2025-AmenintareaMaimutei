@model Duo.Web.ViewModels.QuizSolverViewModel
@using DuoClassLibrary.Models.Exercises

@{
    Layout = "_Layout";
    ViewData["Title"] = $"Solving: {Model.QuizTitle}";
    // percent complete for progress bar
    var pct = (int)Math.Ceiling(100.0 * (Model.CurrentExerciseIndex + 1) / Model.AllExercises.Count);
}

<div class="quiz-solver-container" style="max-width:800px; margin:auto; padding:20px;">
    <h1 class="text-center">@ViewData["Title"]</h1>
    <p class="text-center">
        Question @(Model.CurrentExerciseIndex + 1) of @Model.AllExercises.Count
    </p>
    <hr />

    <!-- PROGRESS BAR -->
    <div class="progress mb-4" style="height:6px;">
        <div class="progress-bar bg-success"
             role="progressbar"
             style="width:@pct%;"
             aria-valuenow="@pct"
             aria-valuemin="0"
             aria-valuemax="100">
        </div>
    </div>

    @switch (Model.CurrentExerciseType)
    {
        case nameof(AssociationExercise):
            var assoc = (AssociationExercise)Model.CurrentExercise;
            <div style="position:relative; padding:1rem; border:1px solid #ccc; border-radius:.5rem; background:#fff;">
                <h5 class="text-center mb-3">@assoc.Question</h5>
                <div class="row gx-0">
                    <div class="col-6">
                        <ul id="assoc-left" class="list-group">
                            @for (int i = 0; i < assoc.FirstAnswersList.Count; i++)
                            {
                                <li class="list-group-item assoc-left-item" data-index="@i">
                                    @assoc.FirstAnswersList[i]
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="col-6">
                        <ul id="assoc-right" class="list-group">
                            @for (int j = 0; j < assoc.SecondAnswersList.Count; j++)
                            {
                                <li class="list-group-item assoc-right-item" data-index="@j">
                                    @assoc.SecondAnswersList[j]
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                <canvas id="assoc-canvas"
                        style="position:absolute; top:0; left:0; width:100%; height:100%; pointer-events:none;">
                </canvas>
                <input type="hidden" id="AssociationPairsJson" name="AssociationPairsJson" />
            </div>
            break;

        case nameof(MultipleChoiceExercise):
            var mc = (MultipleChoiceExercise)Model.CurrentExercise;
            <div class="card mb-3 p-3">
                <h5>@mc.Question</h5>
                <form id="mc-form">
                    @for (int i = 0; i < mc.Choices.Count; i++)
                    {
                        var c = mc.Choices[i];
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="radio"
                                   name="mcChoice"
                                   id="opt@i"
                                   value="@i"
                                   data-answer="@c.Answer"
                                   @(c.IsCorrect ? "data-correct=\"true\"" : "") />
                            <label class="form-check-label" for="opt@i">@c.Answer</label>
                        </div>
                    }
                </form>
                <div class="text-end mt-3">
                    <button class="btn btn-primary" onclick="submitMC()">Submit</button>
                </div>
                <div id="mc-feedback" class="mt-3 fw-semibold"></div>
            </div>
            break;

        case nameof(FillInTheBlankExercise):
            var fib = (FillInTheBlankExercise)Model.CurrentExercise;
            var parts = System.Text.RegularExpressions.Regex.Split(fib.Question, @"\{\}");
            <div class="card mb-3 p-3">
                <h5>@fib.Question</h5>
                @if (parts.Length > 1)
                {
                    <p>
                        @for (int i = 0; i < parts.Length; i++)
                        {
                            @parts[i]
                            @if (i < parts.Length - 1)
                            {
                                <input type="text"
                                       class="form-control d-inline-block blank-input"
                                       style="width:150px; margin:0 .25rem;"
                                       placeholder="Answer"
                                       data-index="@i" />
                            }
                        }
                    </p>
                }
                else
                {
                    <p class="text-muted">Enter your answers:</p>
                    @for (int i = 0; i < fib.PossibleCorrectAnswers.Count; i++)
                    {
                        <input type="text"
                               class="form-control mb-2 blank-input"
                               placeholder="Answer"
                               data-index="@i" />
                    }
                }
                <input type="hidden" id="BlankAnswersJson" name="BlankAnswersJson" />
            </div>
            break;

        case nameof(FlashcardExercise):
            var fc = (FlashcardExercise)Model.CurrentExercise;
            var id = "flash_" + fc.ExerciseId;
            <div class="flashcard-container mb-4">
                <div id="@id" class="flashcard">
                    <!-- FRONT SIDE -->
                    <div class="flashcard-face front">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <svg class="clock-icon" viewBox="0 0 24 24">
                                <circle cx="12" cy="12" r="10" fill="none" stroke="#000" stroke-width="2"/>
                                <path d="M12 2 A10 10 0 0 1 22 12 H12 Z" fill="#000"/>
                            </svg>
                            <span class="difficulty">@fc.Difficulty</span>
                            <span id="timer-@id" class="timer">00:@fc.TimeInSeconds.ToString("00")</span>
                        </div>
                        <h4 class="text-center mb-4">@fc.Question</h4>
                        <input id="input-@id"
                               type="text"
                               class="form-control mb-3"
                               placeholder="Enter your answer here…" />
                        <button id="flip-front-@id" class="btn btn-flip w-100">Flip Card</button>
                    </div>
                    <!-- BACK SIDE -->
                    <div class="flashcard-face back">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <svg class="clock-icon" viewBox="0 0 24 24">
                                <circle cx="12" cy="12" r="10" fill="none" stroke="#000" stroke-width="2"/>
                                <path d="M12 2 A10 10 0 0 1 22 12 H12 Z" fill="#000"/>
                            </svg>
                            <span class="difficulty">@fc.Difficulty</span>
                            <span id="timerBack-@id" class="timer"></span>
                        </div>
                        <h4 class="text-center mb-4">@fc.Answer</h4>
                        <button id="flip-back-@id" class="btn btn-back w-100">Back</button>
                    </div>
                </div>
                <input type="hidden" id="answer-@id" name="FlashcardAnswer" value="" />
            </div>
            break;

        default:
            <p class="text-danger">Unsupported exercise type: @Model.CurrentExerciseType</p>
            break;
    }

    <div class="text-center mt-4">
        @if (!Model.IsLastExercise)
        {
            <a asp-action="Solve"
               asp-route-id="@Model.QuizId"
               asp-route-index="@(Model.CurrentExerciseIndex + 1)"
               class="btn btn-dark btn-lg">Next Exercise →</a>
        }
        else
        {
            <a asp-controller="Roadmap"
               asp-action="Index"
               class="btn btn-success btn-lg">Finish Quiz</a>
        }
    </div>
</div>

@section Scripts {
<script>
  // — Association & Fill-Blank wiring omitted for brevity —
  // — MC feedback —
  function submitMC(){
    const sel = document.querySelector('input[name="mcChoice"]:checked');
    const fb  = document.getElementById('mc-feedback');
    if(!sel){
      fb.innerHTML = '<span class="text-danger">Please select an answer first.</span>';
      return;
    }
    const correct = sel.hasAttribute('data-correct');
    if(correct){
      fb.innerHTML = '<span class="text-success">✔ Correct! Well done.</span>';
    } else {
      const right = [...document.querySelectorAll('input[name="mcChoice"][data-correct]')]
                      .map(x=>x.getAttribute('data-answer')).join(', ');
      fb.innerHTML = `<span class="text-danger">✘ Incorrect. Correct: <strong>${right}</strong>.</span>`;
    }
    document.querySelectorAll('input[name="mcChoice"]').forEach(i=>i.disabled=true);
  }

  // — Flashcard wiring —
  document.addEventListener('DOMContentLoaded', () => {
    const id     = '@("flash_" + ((FlashcardExercise)Model.CurrentExercise).ExerciseId)';
    const card   = document.getElementById(id);
    const btnF   = document.getElementById('flip-front-'+id);
    const btnB   = document.getElementById('flip-back-'+id);
    const tF     = document.getElementById('timer-'+id);
    const tB     = document.getElementById('timerBack-'+id);
    const inp    = document.getElementById('input-'+id);
    const hidden = document.getElementById('answer-'+id);

    tB.textContent = tF.textContent;
    let secs = parseInt(tF.textContent.split(':')[1],10);

    const iv = setInterval(()=>{
      if(secs<=0){
        clearInterval(iv);
        hidden.value='';
        card.style.transform='rotateY(180deg)';
        return;
      }
      secs--;
      const ss = String(secs).padStart(2,'0');
      tF.textContent = `00:${ss}`;
      tB.textContent = `00:${ss}`;
    },1000);

    btnF.addEventListener('click', e => {
      e.preventDefault();
      clearInterval(iv);
      hidden.value = inp.value.trim();
      card.style.transform='rotateY(180deg)';
    });
    btnB.addEventListener('click', e => {
      e.preventDefault();
      clearInterval(iv);
      card.style.transform='rotateY(0deg)';
    });
  });
</script>
}

<style>
  .assoc-left-item, .assoc-right-item { cursor:pointer; }
  .blank-input { display:inline-block; width:150px; margin:0 .25rem; }

  .flashcard-container { perspective:1000px; max-width:600px; margin:2rem auto; }
  .flashcard {
    position:relative;
    border:2px solid #7209b7;
    border-radius:16px;
    transform-style:preserve-3d;
    transition:transform .6s;
    overflow:hidden;
  }
  .flashcard-face {
    position:absolute; width:100%; backface-visibility:hidden;
    background:#fff; padding:24px; box-sizing:border-box;
  }
  .front { transform:rotateY(0deg); }
  .back  { transform:rotateY(180deg); }

  .clock-icon { width:24px; height:24px; }
  .difficulty { text-transform:capitalize; font-size:.9rem; }
  .timer      { font-weight:bold; color:#ffc107; }

  .btn-flip { background:#7209b7; color:#fff; border-radius:24px; padding:12px 0; }
  .btn-back { background:#6c757d; color:#fff; border-radius:24px; padding:12px 0; }
</style>
