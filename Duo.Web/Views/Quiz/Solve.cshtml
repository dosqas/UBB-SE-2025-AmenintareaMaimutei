@model Duo.Web.ViewModels.QuizSolverViewModel
@using DuoClassLibrary.Models.Exercises

@{
    ViewData["Title"] = $"Solving: {Model.QuizTitle}";
}

<div class="quiz-solver-container" style="max-width: 800px; margin: auto; padding: 20px;">
    <h1 class="text-center">@ViewData["Title"]</h1>
    <p class="text-center">
        Question @(Model.CurrentExerciseIndex + 1) of @Model.AllExercises.Count
    </p>
    <hr />

    @if (Model.CurrentExercise != null)
    {
        <div class="exercise-area mb-4">
            <h3>@Model.CurrentExercise.Question</h3>

            <div class="exercise-component-placeholder mb-3"
                 style="border: 1px dashed #ccc; background-color: #f9f9f9;
                  min-height: 200px; padding: 20px;
                  display: flex; align-items: center; justify-content: center;">

                @switch (Model.CurrentExerciseType)
                {
                    case nameof(AssociationExercise):
                        @* note the full path into /Views/Exercise *@
                        @await Html.PartialAsync(
                                 "~/Views/Exercise/_AssociationExercisePartial.cshtml",
                                 (AssociationExercise)Model.CurrentExercise
                                 )
                        break;

                    case nameof(MultipleChoiceExercise):
                        @await Html.PartialAsync(
                                 "~/Views/Exercise/_MultipleChoiceExercisePartial.cshtml",
                                 (MultipleChoiceExercise)Model.CurrentExercise)
                        break;

                    case nameof(FillInTheBlankExercise):
                        @await Html.PartialAsync(
                                 "~/Views/Exercise/_FillInTheBlankExercisePartial.cshtml",
                                 (FillInTheBlankExercise)Model.CurrentExercise)
                        break;

                    case nameof(FlashcardExercise):
                        @await Html.PartialAsync(
                                 "~/Views/Exercise/_FlashcardExercisePartial.cshtml",
                                 (FlashcardExercise)Model.CurrentExercise)
                        break;

                    default:
                        <p>Unsupported exercise type: @Model.CurrentExerciseType</p>
                        break;
                }
            </div>
        </div>

        <div class="navigation-area text-center">
            @if (!Model.IsLastExercise)
            {
                <a asp-action="Solve"
                   asp-route-id="@Model.QuizId"
                   asp-route-index="@(Model.CurrentExerciseIndex + 1)"
                   class="btn btn-secondary btn-lg">
                    Next Exercise &rarr;
                </a>
            }
            else
            {
                <a asp-controller="Roadmap"
                   asp-action="Index"
                   class="btn btn-success btn-lg">
                    Finish Quiz
                </a>
            }
        </div>
    }
    else
    {
        <p class="text-center">No current exercise to display.</p>
    }
</div>
