@{
    ViewData["Title"] = "Create New Quiz";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var selectedExerciseIds = TempData["SelectedExerciseIds"] as List<int> ?? new List<int>();
    var availableExercises = ViewBag.AvailableExercises as IEnumerable<DuoClassLibrary.Models.Exercises.Exercise> ?? new List<DuoClassLibrary.Models.Exercises.Exercise>();
}

<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Create New Quiz</h2>
        <a asp-controller="Quiz" asp-action="ViewQuizzes"
           class="btn btn-outline-secondary btn-sm">← Back</a>
    </div>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <p>@error.ErrorMessage</p>
            }
        </div>
    }

    <form asp-action="CreateQuizConfirmed" method="post">
        @Html.AntiForgeryToken()

        <h5 class="mb-3">Selected Exercises</h5>
        <div class="border rounded p-4 mb-3 dark-box" style="min-height:200px">
            @if (!selectedExerciseIds.Any())
            {
                <p><em>No exercises selected yet.</em></p>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var exId in selectedExerciseIds)
                    {
                        var ex = availableExercises.FirstOrDefault(e => e.ExerciseId == exId);
                        <li class="list-group-item bg-dark text-light d-flex justify-content-between">
                            @ex?.Question (ID: @exId)
                            <button type="submit" asp-action="RemoveSelectedExercise"
                                    asp-route-exerciseId="@exId"
                                    class="btn btn-sm btn-outline-danger">
                                Remove
                            </button>
                        </li>
                    }
                </ul>
            }
        </div>

        <div class="text-end mb-4">
            <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addExerciseModal">
                Add Exercise
            </button>
        </div>

        <div class="text-end">
            <button type="submit" class="btn btn-success">Save Quiz</button>
        </div>
    </form>
</div>
<div class="modal fade" id="addExerciseModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title">Select Exercise</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="AddSelectedExercise" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    @foreach (var ex in availableExercises.Where(e => !selectedExerciseIds.Contains(e.ExerciseId)))
                    {
                        <div class="form-check mb-2">
                            <input class="form-check-input" type="radio" name="exerciseId"
                                   id="ex@ex.ExerciseId" value="@ex.ExerciseId" required />
                            <label class="form-check-label text-light" for="ex@ex.ExerciseId">
                                @ex.Question (ID: @ex.ExerciseId)
                            </label>
                        </div>
                    }
                    @if (!availableExercises.Any(e => !selectedExerciseIds.Contains(e.ExerciseId)))
                    {
                        <p><em>No more exercises available.</em></p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success"
                    @(availableExercises.Any(e => !selectedExerciseIds.Contains(e.ExerciseId)) ? "" : "disabled")>
                        Add Exercise
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        body {
            background: #121212;
            color: #f8f9fa;
        }

        .dark-box {
            background: #1e1e1e;
            border-color: #444;
            color: #f8f9fa;
        }
    </style>
}
