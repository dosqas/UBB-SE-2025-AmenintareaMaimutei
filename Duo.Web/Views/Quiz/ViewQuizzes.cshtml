@model List<DuoClassLibrary.Models.Quizzes.Quiz>
@{
    ViewData["Title"] = "Manage Quizzes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid px-4">

    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Manage Quizzes</h2>
        <a class="btn btn-outline-secondary btn-sm" onclick="history.back()">
            <i class="bi bi-arrow-left"></i> Back
        </a>
    </div>

    <ul id="quizList" class="list-group mb-4">
        @foreach (var quiz in Model)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center bg-dark text-light"
                data-quiz-id="@quiz.Id">
                <span>Quiz #@quiz.Id</span>
                <form asp-action="DeleteQuiz"
                      asp-controller="Quiz"
                      asp-route-id="@quiz.Id"
                      method="post" class="m-0 p-0">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-sm btn-outline-danger">Remove</button>
                </form>
            </li>
        }
    </ul>

    <h5 class="mb-3">Selected Exercises</h5>
    <div id="selectedExercises" class="border rounded p-4 mb-3 dark-box" style="min-height: 200px;">
        <em>Select a quiz above to see its exercises…</em>
    </div>

    <div class="text-end mb-4">
        <button id="showAddModal"
                class="btn btn-primary btn-sm"
                data-bs-toggle="modal"
                data-bs-target="#addExerciseModal"
                disabled>
            Add Exercise
        </button>
    </div>

</div>

<div class="modal fade" id="addExerciseModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title">Select Exercise to Add</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <ul id="allExercisesList" class="list-group"></ul>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-secondary"
                        data-bs-dismiss="modal">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        body {
            background-color: #121212;
            color: #f8f9fa;
        }

        .dark-box {
            background-color: #1e1e1e;
            border-color: #444;
            color: #f8f9fa;
        }

        .list-group-item {
            color: #f8f9fa;
        }

            .list-group-item.active {
                background-color: #0d6efd;
            }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
          let selectedQuizId = null;
          const items = document.querySelectorAll("#quizList li");
          const selBox = document.getElementById("selectedExercises");
          const addBtn = document.getElementById("showAddModal");

          items.forEach(li => {
            li.style.cursor = "pointer";
            li.addEventListener("click", async () => {
              items.forEach(x => x.classList.remove("active"));
              li.classList.add("active");

              selectedQuizId = li.dataset.quizId;
              addBtn.disabled = false;

              const res = await fetch(`/Quiz/GetExercises?quizId=${selectedQuizId}`);
              if (!res.ok) {
                selBox.innerHTML = "<p class='text-danger'>Error loading exercises.</p>";
                return;
              }
              const exs = await res.json();
              if (!exs.length) {
                selBox.innerHTML = "<p><em>No exercises assigned</em></p>";
              } else {
                selBox.innerHTML = "<ul class='list-group'>" +
                  exs.map(e => `<li class='list-group-item bg-dark text-light'>Exercise #${e.exerciseId}</li>`).join("") +
                  "</ul>";
              }
            });
          });

          addBtn.addEventListener("click", async () => {
            if (!selectedQuizId) return;
            const res = await fetch("/Quiz/GetAllExercises");
            if (!res.ok) return;
            const all = await res.json();
            const assigned = Array.from(selBox.querySelectorAll("li"))
                                  .map(li => +li.textContent.match(/#(\d+)/)[1]);

            const list = document.getElementById("allExercisesList");
            list.innerHTML = "";

            all.forEach(ex => {
              if (!assigned.includes(ex.exerciseId)) {
                const li   = document.createElement("li");
                const form = document.createElement("form");
                const token = document.querySelector('input[name="__RequestVerificationToken"]').cloneNode();
                const qid   = Object.assign(document.createElement("input"), { type: "hidden", name: "quizId",     value: selectedQuizId });
                const eid   = Object.assign(document.createElement("input"), { type: "hidden", name: "exerciseId", value: ex.exerciseId });

                li.className   = "list-group-item d-flex justify-content-between bg-secondary text-light";
                li.textContent = `Exercise #${ex.exerciseId}`;

                form.method = "post";
                form.action = "/Quiz/AddExercise";
                form.append(token, qid, eid,
                  Object.assign(document.createElement("button"), {
                    type: "submit",
                    className: "btn btn-sm btn-outline-success",
                    textContent: "Add"
                  })
                );

                li.append(form);
                list.append(li);
              }
            });
          });
        });
    </script>
}
