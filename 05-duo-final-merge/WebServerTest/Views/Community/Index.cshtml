@model WebServerTest.Models.CommunityViewModel
@{
    ViewData["Title"] = "Community";
}

<div class="container mt-4">
    <h2 class="mb-0">Community</h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">@TempData["Error"]</div>
    }

    <!-- Hashtag Search and Filter -->
    <div class="mb-4">
        <div class="d-flex flex-wrap gap-2 mb-2">
            <a href="@Url.Action("Index", new { hashtags = (string[])null, categoryId = Model.SelectedCategoryId })" 
               class="btn @(Model.SelectedHashtags.Count == 0 ? "btn-primary" : "btn-outline-primary")">
                All Posts
            </a>
            <a href="@Url.Action("AddPost", "Community")" class="btn btn-success">Add Post</a>
        </div>
        <div class="d-flex flex-wrap gap-2">
            @foreach (var hashtag in Model.AllHashtags)
            {
                var isSelected = Model.SelectedHashtags.Contains(hashtag.Tag);
                var newHashtags = Model.SelectedHashtags.ToList();
                if (isSelected)
                {
                    newHashtags.Remove(hashtag.Tag);
                }
                else
                {
                    newHashtags.Add(hashtag.Tag);
                }

                <a href="@Url.Action("Index", new { 
                    hashtags = newHashtags.ToArray(), 
                    categoryId = Model.SelectedCategoryId 
                })" 
                   class="btn @(isSelected ? "btn-primary" : "btn-outline-primary")">
                    #@hashtag.Tag
                </a>
            }
        </div>
    </div>

    <!-- Posts -->
    <div class="row">
        <div class="col-12">
            @if (!Model.Posts.Any())
            {
                <div class="alert alert-info">
                    No posts found.
                </div>
            }
            else
            {
                foreach (var post in Model.Posts)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">
                                <a href="@Url.Action("Post", new { id = post.Id })" class="text-decoration-none">
                                    @post.Title
                                </a>
                            </h5>
                            <p class="card-text">@post.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex gap-2">
                                    @foreach (var hashtag in post.Hashtags)
                                    {
                                        var isSelected = Model.SelectedHashtags.Contains(hashtag);
                                        var newHashtags = Model.SelectedHashtags.ToList();
                                        if (isSelected)
                                        {
                                            newHashtags.Remove(hashtag);
                                        }
                                        else
                                        {
                                            newHashtags.Add(hashtag);
                                        }
                                        
                                        <a href="@Url.Action("Index", new { 
                                            hashtags = newHashtags.ToArray(), 
                                            categoryId = Model.SelectedCategoryId 
                                        })" 
                                           class="badge @(isSelected ? "bg-primary" : "bg-secondary") text-decoration-none">
                                            #@hashtag
                                        </a>
                                    }
                                </div>
                                <div class="d-flex align-items-center gap-2">
                                    <span class="me-2">@post.LikeCount likes</span>
                                    <form asp-controller="Community" asp-action="LikePost" method="post" class="d-inline like-form">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@post.Id" />
                                        <button type="submit" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-heart"></i>
                                        </button>
                                    </form>
                                    <a href="@Url.Action("EditPost", "Community", new { id = post.Id })" class="btn btn-sm btn-outline-secondary ms-2">Edit</a>
                                    <form asp-controller="Community" asp-action="DeletePost" method="post" class="d-inline ms-2" onsubmit="return confirm('Are you sure you want to delete this post?');">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@post.Id" />
                                        <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" 
                                       href="@Url.Action("Index", new { 
                                           page = i, 
                                           categoryId = Model.SelectedCategoryId,
                                           hashtags = Model.SelectedHashtags.ToArray()
                                       })">
                                        @i
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('.like-form').submit(function(e) {
                e.preventDefault();
                var form = $(this);
                var postId = form.find('input[name="id"]').val();
                var likesSpan = form.siblings('span');
                var token = form.find('input[name="__RequestVerificationToken"]').val();
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    headers: { 'RequestVerificationToken': token },
                    success: function() {
                        var currentLikes = parseInt(likesSpan.text());
                        likesSpan.text((currentLikes + 1) + ' likes');
                    }
                });
            });
        });
    </script>
} 