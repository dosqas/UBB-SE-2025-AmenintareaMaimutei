@model DuoClassLibrary.Models.Exercises.AssociationExercise

@* 
   This partial renders two side-by-side lists of options.
   The user clicks one item from the left, then one from the right,
   and we draw a line between them on an HTML5 canvas.
   The submitted form will include a JSON array of pairs.
*@
<style>
    .association-exercise {
        min-height: 400px;
        background: white;
        border-radius: 1rem;
        border: 2px solid #6f42c1;
        padding: 1.5rem;
    }

    .assoc-item {
        cursor: pointer;
        user-select: none;
        margin-bottom: 10px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 12px;
        transition: all 0.3s ease;
    }

    .assoc-item:hover {
        border-color: #6f42c1;
        background-color: #f8f9fa;
    }

    .assoc-item.active {
        background-color: #e7f1ff;
        border-color: #6f42c1;
    }

    .assoc-item.matched {
        background-color: #d1e7dd;
        border-color: #198754;
    }

    .assoc-lists {
        display: flex;
        justify-content: space-between;
        gap: 2rem;
        margin-top: 2rem;
    }

    .assoc-list {
        flex: 1;
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .canvas-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }
</style>

<div class="association-exercise position-relative">
    <h4 class="text-center mb-4">@Model.Question</h4>
    
    <div class="assoc-lists">
        <div class="assoc-list-container">
            <h5 class="mb-3">First List</h5>
            <ul id="assoc-left" class="assoc-list">
                @for (int i = 0; i < Model.FirstAnswersList.Count; i++)
                {
                    <li class="assoc-item assoc-left-item"
                        data-index="@i">
                        @Model.FirstAnswersList[i]
                    </li>
                }
            </ul>
        </div>
        
        <div class="assoc-list-container">
            <h5 class="mb-3">Second List</h5>
            <ul id="assoc-right" class="assoc-list">
                @for (int j = 0; j < Model.SecondAnswersList.Count; j++)
                {
                    <li class="assoc-item assoc-right-item"
                        data-index="@j">
                        @Model.SecondAnswersList[j]
                    </li>
                }
            </ul>
        </div>
    </div>

    <div class="canvas-container">
        <canvas id="assoc-canvas"></canvas>
    </div>

    <input type="hidden" name="AssociationPairsJson" id="AssociationPairsJson" />
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const leftItems = document.querySelectorAll('.assoc-left-item');
        const rightItems = document.querySelectorAll('.assoc-right-item');
        const canvas = document.getElementById('assoc-canvas');
        const ctx = canvas.getContext('2d');
        let selectedLeftIndex = null;
        const pairs = [];

        function resizeCanvas() {
            const container = canvas.parentElement;
            canvas.width = container.offsetWidth;
            canvas.height = container.offsetHeight;
            redrawLines();
        }

        // Initial resize and add listeners
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        function getCenter(el) {
            const rect = el.getBoundingClientRect();
            const canvasRect = canvas.getBoundingClientRect();
            return {
                x: (rect.left + rect.right) / 2 - canvasRect.left,
                y: (rect.top + rect.bottom) / 2 - canvasRect.top
            };
        }

        function redrawLines() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw lines for existing pairs
            pairs.forEach(pair => {
                const leftEl = leftItems[pair.left];
                const rightEl = rightItems[pair.right];
                
                ctx.beginPath();
                ctx.strokeStyle = '#198754';
                ctx.lineWidth = 2;
                
                const start = getCenter(leftEl);
                const end = getCenter(rightEl);
                
                ctx.moveTo(start.x, start.y);
                ctx.lineTo(end.x, end.y);
                ctx.stroke();
            });

            // Update hidden input with pairs in the correct format for validation
            document.getElementById('AssociationPairsJson').value = JSON.stringify(pairs);
        }

        function updateMatchedStatus() {
            // Reset all items
            leftItems.forEach(item => item.classList.remove('matched', 'active'));
            rightItems.forEach(item => item.classList.remove('matched', 'active'));
            
            // Mark matched pairs
            pairs.forEach(pair => {
                leftItems[pair.left].classList.add('matched');
                rightItems[pair.right].classList.add('matched');
            });
            
            selectedLeftIndex = null;
        }

        // Left item click handler
        leftItems.forEach(item => {
            item.addEventListener('click', () => {
                const index = parseInt(item.dataset.index);
                
                // If this item is already matched, unselect it and remove its pair
                const existingPair = pairs.find(p => p.left === index);
                if (existingPair) {
                    pairs.splice(pairs.indexOf(existingPair), 1);
                    updateMatchedStatus();
                    redrawLines();
                    return;
                }
                
                // Clear previous selection
                leftItems.forEach(i => i.classList.remove('active'));
                
                // Select this item
                selectedLeftIndex = index;
                item.classList.add('active');
            });
        });

        // Right item click handler
        rightItems.forEach(item => {
            item.addEventListener('click', () => {
                const rightIndex = parseInt(item.dataset.index);
                
                // If this item is already matched, unselect it and remove its pair
                const existingPair = pairs.find(p => p.right === rightIndex);
                if (existingPair) {
                    pairs.splice(pairs.indexOf(existingPair), 1);
                    updateMatchedStatus();
                    redrawLines();
                    return;
                }
                
                // If we have a selected left item and this right item isn't matched
                if (selectedLeftIndex !== null) {
                    pairs.push({
                        left: selectedLeftIndex,
                        right: rightIndex
                    });
                    updateMatchedStatus();
                    redrawLines();
                }
            });
        });
    });
</script>
